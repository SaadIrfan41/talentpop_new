// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Invoice {
  id                 String            @id @default(cuid())
  customer           Customer          @relation(fields: [customerId], references: [id])
  customerId         String            @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  FirstTimeInvoice   FirstTimeInvoice? @relation(fields: [firstTimeInvoiceId], references: [id], onDelete: Cascade)
  firstTimeInvoiceId String?           @unique
  MonthlyInvoice     MonthlyInvoice?   @relation(fields: [monthlyInvoiceId], references: [id], onDelete: Cascade)
  monthlyInvoiceId   String?           @unique
}

model FirstTimeInvoice {
  id                  String   @id @default(cuid())
  customerId          String   @unique
  num_of_agents       Int
  agent_working_days  Int
  agent_working_hours Int
  setup_fee           Int
  total_without_tax   Float
  tax                 Float
  total_with_tax      Float
  is_payed            Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  Invoice Invoice?
}

model MonthlyInvoice {
  id                     String    @id @default(cuid())
  customerId             String    @unique
  num_of_agents          Int
  agent_working_days     Int
  agent_working_hours    Int
  total_without_tax      Float
  tax                    Float
  total_with_tax         Float
  is_payed               Boolean   @default(false)
  payment_recurring_date DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  Invoice Invoice?
}

model Customer {
  id                            String              @id @default(cuid())
  company_name                  String
  phone_number                  String              @unique
  password                      String              @unique
  created_at                    DateTime            @default(now())
  updated_at                    DateTime            @updatedAt
  customer_intake_form_submited Boolean             @default(false)
  customer_intake_form          CustomerIntakeForm?
  invoice                       Invoice?
  accounts                      Account[]
  sessions                      Session[]

  stripeCustomerId String? @unique
  // isSubscribed     Boolean @default(false)
}

model CustomerIntakeForm {
  id                           String   @id @default(cuid())
  customer                     Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  customer_id                  String   @unique
  website_url                  String
  first_name                   String
  last_name                    String
  email                        String
  business_name                String
  business_address             String
  about_business               String
  tasks                        String[]
  inbound_phone_support        String   @default("No")
  customer_service_platform    String[] @default([""])
  ecommerce_platforms          String[]
  qa_sheet_uploaded            String   @default("No")
  qa_sheet_url                 String   @default("")
  num_of_agents                Int
  agent_working_days           Int
  agent_working_hours          Int
  gender_preference            String
  agents_starting_Date         DateTime
  return_exchange_policy       String   @default("")
  most_common_questions        Json
  escalation_contact_firstName String
  escalation_contact_lastName  String
  escalation_contact_email     String
  ticket_tags                  String
  created_at                   DateTime @default(now()) @db.Timestamptz(0)
  updated_at                   DateTime @updatedAt @db.Timestamptz(0)
}

// type Photo {
//   height Int    @default(200)
//   width  Int    @default(100)
//   url    String
// }
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               Customer  @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         Customer @relation(fields: [userId], references: [id])
}
